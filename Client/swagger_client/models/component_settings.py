# coding: utf-8

"""
    AquaPi Swagger API

    REST API for the AquaPi  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.feeder import Feeder  # noqa: F401,E501
from swagger_client.models.lamp import Lamp  # noqa: F401,E501
from swagger_client.models.light_sensor import LightSensor  # noqa: F401,E501
from swagger_client.models.pump import Pump  # noqa: F401,E501
from swagger_client.models.thermometer import Thermometer  # noqa: F401,E501
from swagger_client.models.water_flow_sensor import WaterFlowSensor  # noqa: F401,E501
from swagger_client.models.water_level_sensor import WaterLevelSensor  # noqa: F401,E501


class ComponentSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pi_id': 'str',
        'timestamp': 'datetime',
        'water_flow_sensor': 'WaterFlowSensor',
        'light_sensor': 'LightSensor',
        'water_level_sensor': 'WaterLevelSensor',
        'thermometer': 'Thermometer',
        'lamp': 'Lamp',
        'feeder': 'Feeder',
        'pump': 'Pump'
    }

    attribute_map = {
        'pi_id': 'PiId',
        'timestamp': 'Timestamp',
        'water_flow_sensor': 'WaterFlowSensor',
        'light_sensor': 'LightSensor',
        'water_level_sensor': 'WaterLevelSensor',
        'thermometer': 'Thermometer',
        'lamp': 'Lamp',
        'feeder': 'Feeder',
        'pump': 'Pump'
    }

    def __init__(self, pi_id=None, timestamp=None, water_flow_sensor=None, light_sensor=None, water_level_sensor=None, thermometer=None, lamp=None, feeder=None, pump=None):  # noqa: E501
        """ComponentSettings - a model defined in Swagger"""  # noqa: E501

        self._pi_id = None
        self._timestamp = None
        self._water_flow_sensor = None
        self._light_sensor = None
        self._water_level_sensor = None
        self._thermometer = None
        self._lamp = None
        self._feeder = None
        self._pump = None
        self.discriminator = None

        if pi_id is not None:
            self.pi_id = pi_id
        if timestamp is not None:
            self.timestamp = timestamp
        if water_flow_sensor is not None:
            self.water_flow_sensor = water_flow_sensor
        if light_sensor is not None:
            self.light_sensor = light_sensor
        if water_level_sensor is not None:
            self.water_level_sensor = water_level_sensor
        if thermometer is not None:
            self.thermometer = thermometer
        if lamp is not None:
            self.lamp = lamp
        if feeder is not None:
            self.feeder = feeder
        if pump is not None:
            self.pump = pump

    @property
    def pi_id(self):
        """Gets the pi_id of this ComponentSettings.  # noqa: E501


        :return: The pi_id of this ComponentSettings.  # noqa: E501
        :rtype: str
        """
        return self._pi_id

    @pi_id.setter
    def pi_id(self, pi_id):
        """Sets the pi_id of this ComponentSettings.


        :param pi_id: The pi_id of this ComponentSettings.  # noqa: E501
        :type: str
        """

        self._pi_id = pi_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ComponentSettings.  # noqa: E501


        :return: The timestamp of this ComponentSettings.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ComponentSettings.


        :param timestamp: The timestamp of this ComponentSettings.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def water_flow_sensor(self):
        """Gets the water_flow_sensor of this ComponentSettings.  # noqa: E501


        :return: The water_flow_sensor of this ComponentSettings.  # noqa: E501
        :rtype: WaterFlowSensor
        """
        return self._water_flow_sensor

    @water_flow_sensor.setter
    def water_flow_sensor(self, water_flow_sensor):
        """Sets the water_flow_sensor of this ComponentSettings.


        :param water_flow_sensor: The water_flow_sensor of this ComponentSettings.  # noqa: E501
        :type: WaterFlowSensor
        """

        self._water_flow_sensor = water_flow_sensor

    @property
    def light_sensor(self):
        """Gets the light_sensor of this ComponentSettings.  # noqa: E501


        :return: The light_sensor of this ComponentSettings.  # noqa: E501
        :rtype: LightSensor
        """
        return self._light_sensor

    @light_sensor.setter
    def light_sensor(self, light_sensor):
        """Sets the light_sensor of this ComponentSettings.


        :param light_sensor: The light_sensor of this ComponentSettings.  # noqa: E501
        :type: LightSensor
        """

        self._light_sensor = light_sensor

    @property
    def water_level_sensor(self):
        """Gets the water_level_sensor of this ComponentSettings.  # noqa: E501


        :return: The water_level_sensor of this ComponentSettings.  # noqa: E501
        :rtype: WaterLevelSensor
        """
        return self._water_level_sensor

    @water_level_sensor.setter
    def water_level_sensor(self, water_level_sensor):
        """Sets the water_level_sensor of this ComponentSettings.


        :param water_level_sensor: The water_level_sensor of this ComponentSettings.  # noqa: E501
        :type: WaterLevelSensor
        """

        self._water_level_sensor = water_level_sensor

    @property
    def thermometer(self):
        """Gets the thermometer of this ComponentSettings.  # noqa: E501


        :return: The thermometer of this ComponentSettings.  # noqa: E501
        :rtype: Thermometer
        """
        return self._thermometer

    @thermometer.setter
    def thermometer(self, thermometer):
        """Sets the thermometer of this ComponentSettings.


        :param thermometer: The thermometer of this ComponentSettings.  # noqa: E501
        :type: Thermometer
        """

        self._thermometer = thermometer

    @property
    def lamp(self):
        """Gets the lamp of this ComponentSettings.  # noqa: E501


        :return: The lamp of this ComponentSettings.  # noqa: E501
        :rtype: Lamp
        """
        return self._lamp

    @lamp.setter
    def lamp(self, lamp):
        """Sets the lamp of this ComponentSettings.


        :param lamp: The lamp of this ComponentSettings.  # noqa: E501
        :type: Lamp
        """

        self._lamp = lamp

    @property
    def feeder(self):
        """Gets the feeder of this ComponentSettings.  # noqa: E501


        :return: The feeder of this ComponentSettings.  # noqa: E501
        :rtype: Feeder
        """
        return self._feeder

    @feeder.setter
    def feeder(self, feeder):
        """Sets the feeder of this ComponentSettings.


        :param feeder: The feeder of this ComponentSettings.  # noqa: E501
        :type: Feeder
        """

        self._feeder = feeder

    @property
    def pump(self):
        """Gets the pump of this ComponentSettings.  # noqa: E501


        :return: The pump of this ComponentSettings.  # noqa: E501
        :rtype: Pump
        """
        return self._pump

    @pump.setter
    def pump(self, pump):
        """Sets the pump of this ComponentSettings.


        :param pump: The pump of this ComponentSettings.  # noqa: E501
        :type: Pump
        """

        self._pump = pump

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComponentSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
