# coding: utf-8

"""
    AquaPi Swagger API

    REST API for the AquaPi

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Fishes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'piid': 'str',
        'fishid': 'str',
        'name': 'str',
        'quantity': 'int',
        'mintemp': 'int',
        'maxtemp': 'int',
        'frostfood': 'int',
        'flakefood': 'int',
        'livefood': 'int',
        'needshiding': 'int',
        'helplink': 'str',
        'piclink': 'str',
        'minquantity': 'int',
        'weight': 'int'
    }

    attribute_map = {
        'piid': 'piid',
        'fishid': 'fishid',
        'name': 'name',
        'quantity': 'quantity',
        'mintemp': 'mintemp',
        'maxtemp': 'maxtemp',
        'frostfood': 'frostfood',
        'flakefood': 'flakefood',
        'livefood': 'livefood',
        'needshiding': 'needshiding',
        'helplink': 'helplink',
        'piclink': 'piclink',
        'minquantity': 'minquantity',
        'weight': 'weight'
    }

    def __init__(self, piid=None, fishid=None, name=None, quantity=None, mintemp=None, maxtemp=None, frostfood=None, flakefood=None, livefood=None, needshiding=None, helplink=None, piclink=None, minquantity=None, weight=None):
        """
        Fishes - a model defined in Swagger
        """

        self._piid = None
        self._fishid = None
        self._name = None
        self._quantity = None
        self._mintemp = None
        self._maxtemp = None
        self._frostfood = None
        self._flakefood = None
        self._livefood = None
        self._needshiding = None
        self._helplink = None
        self._piclink = None
        self._minquantity = None
        self._weight = None

        if piid is not None:
          self.piid = piid
        if fishid is not None:
          self.fishid = fishid
        if name is not None:
          self.name = name
        if quantity is not None:
          self.quantity = quantity
        if mintemp is not None:
          self.mintemp = mintemp
        if maxtemp is not None:
          self.maxtemp = maxtemp
        if frostfood is not None:
          self.frostfood = frostfood
        if flakefood is not None:
          self.flakefood = flakefood
        if livefood is not None:
          self.livefood = livefood
        if needshiding is not None:
          self.needshiding = needshiding
        if helplink is not None:
          self.helplink = helplink
        if piclink is not None:
          self.piclink = piclink
        if minquantity is not None:
          self.minquantity = minquantity
        if weight is not None:
          self.weight = weight

    @property
    def piid(self):
        """
        Gets the piid of this Fishes.

        :return: The piid of this Fishes.
        :rtype: str
        """
        return self._piid

    @piid.setter
    def piid(self, piid):
        """
        Sets the piid of this Fishes.

        :param piid: The piid of this Fishes.
        :type: str
        """

        self._piid = piid

    @property
    def fishid(self):
        """
        Gets the fishid of this Fishes.

        :return: The fishid of this Fishes.
        :rtype: str
        """
        return self._fishid

    @fishid.setter
    def fishid(self, fishid):
        """
        Sets the fishid of this Fishes.

        :param fishid: The fishid of this Fishes.
        :type: str
        """

        self._fishid = fishid

    @property
    def name(self):
        """
        Gets the name of this Fishes.

        :return: The name of this Fishes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Fishes.

        :param name: The name of this Fishes.
        :type: str
        """

        self._name = name

    @property
    def quantity(self):
        """
        Gets the quantity of this Fishes.

        :return: The quantity of this Fishes.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this Fishes.

        :param quantity: The quantity of this Fishes.
        :type: int
        """

        self._quantity = quantity

    @property
    def mintemp(self):
        """
        Gets the mintemp of this Fishes.

        :return: The mintemp of this Fishes.
        :rtype: int
        """
        return self._mintemp

    @mintemp.setter
    def mintemp(self, mintemp):
        """
        Sets the mintemp of this Fishes.

        :param mintemp: The mintemp of this Fishes.
        :type: int
        """

        self._mintemp = mintemp

    @property
    def maxtemp(self):
        """
        Gets the maxtemp of this Fishes.

        :return: The maxtemp of this Fishes.
        :rtype: int
        """
        return self._maxtemp

    @maxtemp.setter
    def maxtemp(self, maxtemp):
        """
        Sets the maxtemp of this Fishes.

        :param maxtemp: The maxtemp of this Fishes.
        :type: int
        """

        self._maxtemp = maxtemp

    @property
    def frostfood(self):
        """
        Gets the frostfood of this Fishes.

        :return: The frostfood of this Fishes.
        :rtype: int
        """
        return self._frostfood

    @frostfood.setter
    def frostfood(self, frostfood):
        """
        Sets the frostfood of this Fishes.

        :param frostfood: The frostfood of this Fishes.
        :type: int
        """

        self._frostfood = frostfood

    @property
    def flakefood(self):
        """
        Gets the flakefood of this Fishes.

        :return: The flakefood of this Fishes.
        :rtype: int
        """
        return self._flakefood

    @flakefood.setter
    def flakefood(self, flakefood):
        """
        Sets the flakefood of this Fishes.

        :param flakefood: The flakefood of this Fishes.
        :type: int
        """

        self._flakefood = flakefood

    @property
    def livefood(self):
        """
        Gets the livefood of this Fishes.

        :return: The livefood of this Fishes.
        :rtype: int
        """
        return self._livefood

    @livefood.setter
    def livefood(self, livefood):
        """
        Sets the livefood of this Fishes.

        :param livefood: The livefood of this Fishes.
        :type: int
        """

        self._livefood = livefood

    @property
    def needshiding(self):
        """
        Gets the needshiding of this Fishes.

        :return: The needshiding of this Fishes.
        :rtype: int
        """
        return self._needshiding

    @needshiding.setter
    def needshiding(self, needshiding):
        """
        Sets the needshiding of this Fishes.

        :param needshiding: The needshiding of this Fishes.
        :type: int
        """

        self._needshiding = needshiding

    @property
    def helplink(self):
        """
        Gets the helplink of this Fishes.

        :return: The helplink of this Fishes.
        :rtype: str
        """
        return self._helplink

    @helplink.setter
    def helplink(self, helplink):
        """
        Sets the helplink of this Fishes.

        :param helplink: The helplink of this Fishes.
        :type: str
        """

        self._helplink = helplink

    @property
    def piclink(self):
        """
        Gets the piclink of this Fishes.

        :return: The piclink of this Fishes.
        :rtype: str
        """
        return self._piclink

    @piclink.setter
    def piclink(self, piclink):
        """
        Sets the piclink of this Fishes.

        :param piclink: The piclink of this Fishes.
        :type: str
        """

        self._piclink = piclink

    @property
    def minquantity(self):
        """
        Gets the minquantity of this Fishes.

        :return: The minquantity of this Fishes.
        :rtype: int
        """
        return self._minquantity

    @minquantity.setter
    def minquantity(self, minquantity):
        """
        Sets the minquantity of this Fishes.

        :param minquantity: The minquantity of this Fishes.
        :type: int
        """

        self._minquantity = minquantity

    @property
    def weight(self):
        """
        Gets the weight of this Fishes.

        :return: The weight of this Fishes.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """
        Sets the weight of this Fishes.

        :param weight: The weight of this Fishes.
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Fishes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
