# coding: utf-8

"""
    AquaPi Swagger API

    REST API for the AquaPi

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Plants(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'piid': 'str',
        'plantid': 'str',
        'name': 'str',
        'quantity': 'int'
    }

    attribute_map = {
        'piid': 'piid',
        'plantid': 'plantid',
        'name': 'name',
        'quantity': 'quantity'
    }

    def __init__(self, piid=None, plantid=None, name=None, quantity=None):
        """
        Plants - a model defined in Swagger
        """

        self._piid = None
        self._plantid = None
        self._name = None
        self._quantity = None

        if piid is not None:
          self.piid = piid
        if plantid is not None:
          self.plantid = plantid
        if name is not None:
          self.name = name
        if quantity is not None:
          self.quantity = quantity

    @property
    def piid(self):
        """
        Gets the piid of this Plants.

        :return: The piid of this Plants.
        :rtype: str
        """
        return self._piid

    @piid.setter
    def piid(self, piid):
        """
        Sets the piid of this Plants.

        :param piid: The piid of this Plants.
        :type: str
        """

        self._piid = piid

    @property
    def plantid(self):
        """
        Gets the plantid of this Plants.

        :return: The plantid of this Plants.
        :rtype: str
        """
        return self._plantid

    @plantid.setter
    def plantid(self, plantid):
        """
        Sets the plantid of this Plants.

        :param plantid: The plantid of this Plants.
        :type: str
        """

        self._plantid = plantid

    @property
    def name(self):
        """
        Gets the name of this Plants.

        :return: The name of this Plants.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Plants.

        :param name: The name of this Plants.
        :type: str
        """

        self._name = name

    @property
    def quantity(self):
        """
        Gets the quantity of this Plants.

        :return: The quantity of this Plants.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this Plants.

        :param quantity: The quantity of this Plants.
        :type: int
        """

        self._quantity = quantity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Plants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
