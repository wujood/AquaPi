# coding: utf-8

"""
    AquaPi Swagger API

    REST API for the AquaPi

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ComponentSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'piid': 'str',
        'timestamp': 'datetime',
        'waterflowsensor': 'WaterFlowSensor',
        'lightsensor': 'LightSensor',
        'waterlevelsensor': 'WaterLevelSensor',
        'waterthermometer': 'Thermometer',
        'airthermometer': 'Thermometer',
        'lamp': 'Lamp',
        'feeder': 'Feeder',
        'pump': 'Pump'
    }

    attribute_map = {
        'piid': 'piid',
        'timestamp': 'timestamp',
        'waterflowsensor': 'waterflowsensor',
        'lightsensor': 'lightsensor',
        'waterlevelsensor': 'waterlevelsensor',
        'waterthermometer': 'waterthermometer',
        'airthermometer': 'airthermometer',
        'lamp': 'lamp',
        'feeder': 'feeder',
        'pump': 'pump'
    }

    def __init__(self, piid=None, timestamp=None, waterflowsensor=None, lightsensor=None, waterlevelsensor=None, waterthermometer=None, airthermometer=None, lamp=None, feeder=None, pump=None):
        """
        ComponentSettings - a model defined in Swagger
        """

        self._piid = None
        self._timestamp = None
        self._waterflowsensor = None
        self._lightsensor = None
        self._waterlevelsensor = None
        self._waterthermometer = None
        self._airthermometer = None
        self._lamp = None
        self._feeder = None
        self._pump = None

        self.piid = piid
        if timestamp is not None:
          self.timestamp = timestamp
        if waterflowsensor is not None:
          self.waterflowsensor = waterflowsensor
        if lightsensor is not None:
          self.lightsensor = lightsensor
        if waterlevelsensor is not None:
          self.waterlevelsensor = waterlevelsensor
        if waterthermometer is not None:
          self.waterthermometer = waterthermometer
        if airthermometer is not None:
          self.airthermometer = airthermometer
        if lamp is not None:
          self.lamp = lamp
        if feeder is not None:
          self.feeder = feeder
        if pump is not None:
          self.pump = pump

    @property
    def piid(self):
        """
        Gets the piid of this ComponentSettings.

        :return: The piid of this ComponentSettings.
        :rtype: str
        """
        return self._piid

    @piid.setter
    def piid(self, piid):
        """
        Sets the piid of this ComponentSettings.

        :param piid: The piid of this ComponentSettings.
        :type: str
        """
        if piid is None:
            raise ValueError("Invalid value for `piid`, must not be `None`")

        self._piid = piid

    @property
    def timestamp(self):
        """
        Gets the timestamp of this ComponentSettings.

        :return: The timestamp of this ComponentSettings.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this ComponentSettings.

        :param timestamp: The timestamp of this ComponentSettings.
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def waterflowsensor(self):
        """
        Gets the waterflowsensor of this ComponentSettings.

        :return: The waterflowsensor of this ComponentSettings.
        :rtype: WaterFlowSensor
        """
        return self._waterflowsensor

    @waterflowsensor.setter
    def waterflowsensor(self, waterflowsensor):
        """
        Sets the waterflowsensor of this ComponentSettings.

        :param waterflowsensor: The waterflowsensor of this ComponentSettings.
        :type: WaterFlowSensor
        """

        self._waterflowsensor = waterflowsensor

    @property
    def lightsensor(self):
        """
        Gets the lightsensor of this ComponentSettings.

        :return: The lightsensor of this ComponentSettings.
        :rtype: LightSensor
        """
        return self._lightsensor

    @lightsensor.setter
    def lightsensor(self, lightsensor):
        """
        Sets the lightsensor of this ComponentSettings.

        :param lightsensor: The lightsensor of this ComponentSettings.
        :type: LightSensor
        """

        self._lightsensor = lightsensor

    @property
    def waterlevelsensor(self):
        """
        Gets the waterlevelsensor of this ComponentSettings.

        :return: The waterlevelsensor of this ComponentSettings.
        :rtype: WaterLevelSensor
        """
        return self._waterlevelsensor

    @waterlevelsensor.setter
    def waterlevelsensor(self, waterlevelsensor):
        """
        Sets the waterlevelsensor of this ComponentSettings.

        :param waterlevelsensor: The waterlevelsensor of this ComponentSettings.
        :type: WaterLevelSensor
        """

        self._waterlevelsensor = waterlevelsensor

    @property
    def waterthermometer(self):
        """
        Gets the waterthermometer of this ComponentSettings.

        :return: The waterthermometer of this ComponentSettings.
        :rtype: Thermometer
        """
        return self._waterthermometer

    @waterthermometer.setter
    def waterthermometer(self, waterthermometer):
        """
        Sets the waterthermometer of this ComponentSettings.

        :param waterthermometer: The waterthermometer of this ComponentSettings.
        :type: Thermometer
        """

        self._waterthermometer = waterthermometer

    @property
    def airthermometer(self):
        """
        Gets the airthermometer of this ComponentSettings.

        :return: The airthermometer of this ComponentSettings.
        :rtype: Thermometer
        """
        return self._airthermometer

    @airthermometer.setter
    def airthermometer(self, airthermometer):
        """
        Sets the airthermometer of this ComponentSettings.

        :param airthermometer: The airthermometer of this ComponentSettings.
        :type: Thermometer
        """

        self._airthermometer = airthermometer

    @property
    def lamp(self):
        """
        Gets the lamp of this ComponentSettings.

        :return: The lamp of this ComponentSettings.
        :rtype: Lamp
        """
        return self._lamp

    @lamp.setter
    def lamp(self, lamp):
        """
        Sets the lamp of this ComponentSettings.

        :param lamp: The lamp of this ComponentSettings.
        :type: Lamp
        """

        self._lamp = lamp

    @property
    def feeder(self):
        """
        Gets the feeder of this ComponentSettings.

        :return: The feeder of this ComponentSettings.
        :rtype: Feeder
        """
        return self._feeder

    @feeder.setter
    def feeder(self, feeder):
        """
        Sets the feeder of this ComponentSettings.

        :param feeder: The feeder of this ComponentSettings.
        :type: Feeder
        """

        self._feeder = feeder

    @property
    def pump(self):
        """
        Gets the pump of this ComponentSettings.

        :return: The pump of this ComponentSettings.
        :rtype: Pump
        """
        return self._pump

    @pump.setter
    def pump(self, pump):
        """
        Sets the pump of this ComponentSettings.

        :param pump: The pump of this ComponentSettings.
        :type: Pump
        """

        self._pump = pump

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ComponentSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
